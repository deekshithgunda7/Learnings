Observer Pattern
Defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.

Example: Account Balance Update
When a transaction is processed, all observers (like account balance update service, notification service) need to be notified.


public interface Observer {
    void update();
}

public class AccountBalanceObserver implements Observer {
    public void update() {
        // Update account balance
    }
}

public class NotificationObserver implements Observer {
    public void update() {
        // Send notification
    }
}

public class TransactionSubject {
    private List<Observer> observers = new ArrayList<>();
    
    public void addObserver(Observer observer) {
        observers.add(observer);
    }
    
    public void removeObserver(Observer observer) {
        observers.remove(observer);
    }
    
    public void notifyObservers() {
        for (Observer observer : observers) {
            observer.update();
        }
    }
    
    public void processTransaction() {
        // Process transaction
        notifyObservers();
    }
}